package edu.uiowa.jopenmm;

import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.ptr.DoubleByReference;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.PointerByReference;
import java.nio.DoubleBuffer;
import java.nio.IntBuffer;

/**
 * JNA Wrapper for library <b>OpenMMAmoeba</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a
 * href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource
 * projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a
 * href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class OpenMMAmoebaLibrary implements Library {
  public static final String JNA_LIBRARY_NAME = "OpenMMAmoeba";
  public static final NativeLibrary JNA_NATIVE_LIB =
      NativeLibrary.getInstance(OpenMMAmoebaLibrary.JNA_LIBRARY_NAME);

  static {
    Native.register(OpenMMAmoebaLibrary.class, OpenMMAmoebaLibrary.JNA_NATIVE_LIB);
  }
  /** enum values */
  public static interface OpenMM_HippoNonbondedForce_NonbondedMethod {
    public static final int OpenMM_HippoNonbondedForce_NoCutoff = 0;
    public static final int OpenMM_HippoNonbondedForce_PME = 1;
  };
  /** enum values */
  public static interface OpenMM_HippoNonbondedForce_ParticleAxisTypes {
    public static final int OpenMM_HippoNonbondedForce_ZThenX = 0;
    public static final int OpenMM_HippoNonbondedForce_Bisector = 1;
    public static final int OpenMM_HippoNonbondedForce_ZBisect = 2;
    public static final int OpenMM_HippoNonbondedForce_ThreeFold = 3;
    public static final int OpenMM_HippoNonbondedForce_ZOnly = 4;
    public static final int OpenMM_HippoNonbondedForce_NoAxisType = 5;
  };
  /** enum values */
  public static interface OpenMM_AmoebaGKCavitationForce_NonbondedMethod {
    public static final int OpenMM_AmoebaGKCavitationForce_NoCutoff = 0;
    public static final int OpenMM_AmoebaGKCavitationForce_CutoffNonPeriodic = 1;
    public static final int OpenMM_AmoebaGKCavitationForce_CutoffPeriodic = 2;
  };
  /** enum values */
  public static interface OpenMM_AmoebaMultipoleForce_NonbondedMethod {
    public static final int OpenMM_AmoebaMultipoleForce_NoCutoff = 0;
    public static final int OpenMM_AmoebaMultipoleForce_PME = 1;
  };
  /** enum values */
  public static interface OpenMM_AmoebaMultipoleForce_PolarizationType {
    public static final int OpenMM_AmoebaMultipoleForce_Mutual = 0;
    public static final int OpenMM_AmoebaMultipoleForce_Direct = 1;
    public static final int OpenMM_AmoebaMultipoleForce_Extrapolated = 2;
  };
  /** enum values */
  public static interface OpenMM_AmoebaMultipoleForce_MultipoleAxisTypes {
    public static final int OpenMM_AmoebaMultipoleForce_ZThenX = 0;
    public static final int OpenMM_AmoebaMultipoleForce_Bisector = 1;
    public static final int OpenMM_AmoebaMultipoleForce_ZBisect = 2;
    public static final int OpenMM_AmoebaMultipoleForce_ThreeFold = 3;
    public static final int OpenMM_AmoebaMultipoleForce_ZOnly = 4;
    public static final int OpenMM_AmoebaMultipoleForce_NoAxisType = 5;
    public static final int OpenMM_AmoebaMultipoleForce_LastAxisTypeIndex = 6;
  };
  /** enum values */
  public static interface OpenMM_AmoebaMultipoleForce_CovalentType {
    public static final int OpenMM_AmoebaMultipoleForce_Covalent12 = 0;
    public static final int OpenMM_AmoebaMultipoleForce_Covalent13 = 1;
    public static final int OpenMM_AmoebaMultipoleForce_Covalent14 = 2;
    public static final int OpenMM_AmoebaMultipoleForce_Covalent15 = 3;
    public static final int OpenMM_AmoebaMultipoleForce_PolarizationCovalent11 = 4;
    public static final int OpenMM_AmoebaMultipoleForce_PolarizationCovalent12 = 5;
    public static final int OpenMM_AmoebaMultipoleForce_PolarizationCovalent13 = 6;
    public static final int OpenMM_AmoebaMultipoleForce_PolarizationCovalent14 = 7;
    public static final int OpenMM_AmoebaMultipoleForce_CovalentEnd = 8;
  };
  /** enum values */
  public static interface OpenMM_AmoebaVdwForce_NonbondedMethod {
    public static final int OpenMM_AmoebaVdwForce_NoCutoff = 0;
    public static final int OpenMM_AmoebaVdwForce_CutoffPeriodic = 1;
  };
  /** enum values */
  public static interface OpenMM_AmoebaVdwForce_PotentialFunction {
    public static final int OpenMM_AmoebaVdwForce_Buffered147 = 0;
    public static final int OpenMM_AmoebaVdwForce_LennardJones = 1;
  };
  /** enum values */
  public static interface OpenMM_AmoebaVdwForce_AlchemicalMethod {
    public static final int OpenMM_AmoebaVdwForce_None = 0;
    public static final int OpenMM_AmoebaVdwForce_Decouple = 1;
    public static final int OpenMM_AmoebaVdwForce_Annihilate = 2;
  };
  /** Global Constants */
  public static final double OpenMM_NmPerAngstrom = 0.1;

  public static final double OpenMM_AngstromsPerNm = 10.0;
  public static final double OpenMM_PsPerFs = 0.001;
  public static final double OpenMM_FsPerPs = 1000.0;
  public static final double OpenMM_KJPerKcal = 4.184;
  public static final double OpenMM_KcalPerKJ = 1.0 / 4.184;
  public static final double OpenMM_RadiansPerDegree = 3.1415926535897932385 / 180.0;
  public static final double OpenMM_DegreesPerRadian = 180.0 / 3.1415926535897932385;
  public static final double OpenMM_SigmaPerVdwRadius = 1.7817974362806786095;
  /**
   * OpenMM_3D_DoubleArray<br>
   * Original signature : <code>OpenMM_3D_DoubleArray* OpenMM_3D_DoubleArray_create(int, int, int)
   * </code>
   */
  public static native PointerByReference OpenMM_3D_DoubleArray_create(
      int size1, int size2, int size3);
  /**
   * Original signature : <code>
   * void OpenMM_3D_DoubleArray_set(OpenMM_3D_DoubleArray*, int, int, OpenMM_DoubleArray*)</code>
   */
  public static native void OpenMM_3D_DoubleArray_set(
      PointerByReference array, int index1, int index2, PointerByReference values);
  /**
   * Original signature : <code>void OpenMM_3D_DoubleArray_destroy(OpenMM_3D_DoubleArray*)</code>
   */
  public static native void OpenMM_3D_DoubleArray_destroy(PointerByReference array);
  /**
   * AmoebaTorsionTorsionForce<br>
   * Original signature : <code>
   * OpenMM_AmoebaTorsionTorsionForce* OpenMM_AmoebaTorsionTorsionForce_create()</code>
   */
  public static native PointerByReference OpenMM_AmoebaTorsionTorsionForce_create();
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaTorsionTorsionForce_destroy(OpenMM_AmoebaTorsionTorsionForce*)</code>
   */
  public static native void OpenMM_AmoebaTorsionTorsionForce_destroy(PointerByReference target);
  /**
   * Original signature : <code>
   * int OpenMM_AmoebaTorsionTorsionForce_getNumTorsionTorsions(const OpenMM_AmoebaTorsionTorsionForce*)
   * </code>
   */
  public static native int OpenMM_AmoebaTorsionTorsionForce_getNumTorsionTorsions(
      PointerByReference target);
  /**
   * Original signature : <code>
   * int OpenMM_AmoebaTorsionTorsionForce_getNumTorsionTorsionGrids(const OpenMM_AmoebaTorsionTorsionForce*)
   * </code>
   */
  public static native int OpenMM_AmoebaTorsionTorsionForce_getNumTorsionTorsionGrids(
      PointerByReference target);
  /**
   * Original signature : <code>
   * int OpenMM_AmoebaTorsionTorsionForce_addTorsionTorsion(OpenMM_AmoebaTorsionTorsionForce*, int, int, int, int, int, int, int)
   * </code>
   */
  public static native int OpenMM_AmoebaTorsionTorsionForce_addTorsionTorsion(
      PointerByReference target,
      int particle1,
      int particle2,
      int particle3,
      int particle4,
      int particle5,
      int chiralCheckAtomIndex,
      int gridIndex);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaTorsionTorsionForce_getTorsionTorsionParameters(const OpenMM_AmoebaTorsionTorsionForce*, int, int*, int*, int*, int*, int*, int*, int*)
   * </code>
   */
  public static native void OpenMM_AmoebaTorsionTorsionForce_getTorsionTorsionParameters(
      PointerByReference target,
      int index,
      IntBuffer particle1,
      IntBuffer particle2,
      IntBuffer particle3,
      IntBuffer particle4,
      IntBuffer particle5,
      IntBuffer chiralCheckAtomIndex,
      IntBuffer gridIndex);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaTorsionTorsionForce_getTorsionTorsionParameters(const OpenMM_AmoebaTorsionTorsionForce*, int, int*, int*, int*, int*, int*, int*, int*)
   * </code>
   */
  public static native void OpenMM_AmoebaTorsionTorsionForce_getTorsionTorsionParameters(
      PointerByReference target,
      int index,
      IntByReference particle1,
      IntByReference particle2,
      IntByReference particle3,
      IntByReference particle4,
      IntByReference particle5,
      IntByReference chiralCheckAtomIndex,
      IntByReference gridIndex);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaTorsionTorsionForce_setTorsionTorsionParameters(OpenMM_AmoebaTorsionTorsionForce*, int, int, int, int, int, int, int, int)
   * </code>
   */
  public static native void OpenMM_AmoebaTorsionTorsionForce_setTorsionTorsionParameters(
      PointerByReference target,
      int index,
      int particle1,
      int particle2,
      int particle3,
      int particle4,
      int particle5,
      int chiralCheckAtomIndex,
      int gridIndex);
  /**
   * Original signature : <code>
   * OpenMM_3D_DoubleArray* OpenMM_AmoebaTorsionTorsionForce_getTorsionTorsionGrid(const OpenMM_AmoebaTorsionTorsionForce*, int)
   * </code>
   */
  public static native PointerByReference OpenMM_AmoebaTorsionTorsionForce_getTorsionTorsionGrid(
      PointerByReference target, int index);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaTorsionTorsionForce_setTorsionTorsionGrid(OpenMM_AmoebaTorsionTorsionForce*, int, const OpenMM_3D_DoubleArray*)
   * </code>
   */
  public static native void OpenMM_AmoebaTorsionTorsionForce_setTorsionTorsionGrid(
      PointerByReference target, int index, PointerByReference grid);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaTorsionTorsionForce_setUsesPeriodicBoundaryConditions(OpenMM_AmoebaTorsionTorsionForce*, OpenMM_Boolean)
   * </code>
   */
  public static native void OpenMM_AmoebaTorsionTorsionForce_setUsesPeriodicBoundaryConditions(
      PointerByReference target, int periodic);
  /**
   * Original signature : <code>
   * OpenMM_Boolean OpenMM_AmoebaTorsionTorsionForce_usesPeriodicBoundaryConditions(const OpenMM_AmoebaTorsionTorsionForce*)
   * </code>
   */
  public static native int OpenMM_AmoebaTorsionTorsionForce_usesPeriodicBoundaryConditions(
      PointerByReference target);
  /**
   * Original signature : <code>OpenMM_HippoNonbondedForce* OpenMM_HippoNonbondedForce_create()
   * </code>
   */
  public static native PointerByReference OpenMM_HippoNonbondedForce_create();
  /**
   * Original signature : <code>void OpenMM_HippoNonbondedForce_destroy(OpenMM_HippoNonbondedForce*)
   * </code>
   */
  public static native void OpenMM_HippoNonbondedForce_destroy(PointerByReference target);
  /**
   * Original signature : <code>
   * int OpenMM_HippoNonbondedForce_getNumParticles(const OpenMM_HippoNonbondedForce*)</code>
   */
  public static native int OpenMM_HippoNonbondedForce_getNumParticles(PointerByReference target);
  /**
   * Original signature : <code>
   * int OpenMM_HippoNonbondedForce_getNumExceptions(const OpenMM_HippoNonbondedForce*)</code>
   */
  public static native int OpenMM_HippoNonbondedForce_getNumExceptions(PointerByReference target);
  /**
   * Original signature : <code>
   * OpenMM_HippoNonbondedForce_NonbondedMethod OpenMM_HippoNonbondedForce_getNonbondedMethod(const OpenMM_HippoNonbondedForce*)
   * </code>
   */
  public static native int OpenMM_HippoNonbondedForce_getNonbondedMethod(PointerByReference target);
  /**
   * Original signature : <code>
   * void OpenMM_HippoNonbondedForce_setNonbondedMethod(OpenMM_HippoNonbondedForce*, OpenMM_HippoNonbondedForce_NonbondedMethod)
   * </code>
   */
  public static native void OpenMM_HippoNonbondedForce_setNonbondedMethod(
      PointerByReference target, int method);
  /**
   * Original signature : <code>
   * double OpenMM_HippoNonbondedForce_getCutoffDistance(const OpenMM_HippoNonbondedForce*)</code>
   */
  public static native double OpenMM_HippoNonbondedForce_getCutoffDistance(
      PointerByReference target);
  /**
   * Original signature : <code>
   * void OpenMM_HippoNonbondedForce_setCutoffDistance(OpenMM_HippoNonbondedForce*, double)</code>
   */
  public static native void OpenMM_HippoNonbondedForce_setCutoffDistance(
      PointerByReference target, double distance);
  /**
   * Original signature : <code>
   * double OpenMM_HippoNonbondedForce_getSwitchingDistance(const OpenMM_HippoNonbondedForce*)
   * </code>
   */
  public static native double OpenMM_HippoNonbondedForce_getSwitchingDistance(
      PointerByReference target);
  /**
   * Original signature : <code>
   * void OpenMM_HippoNonbondedForce_setSwitchingDistance(OpenMM_HippoNonbondedForce*, double)
   * </code>
   */
  public static native void OpenMM_HippoNonbondedForce_setSwitchingDistance(
      PointerByReference target, double distance);
  /**
   * Original signature : <code>
   * OpenMM_DoubleArray* OpenMM_HippoNonbondedForce_getExtrapolationCoefficients(const OpenMM_HippoNonbondedForce*)
   * </code>
   */
  public static native PointerByReference OpenMM_HippoNonbondedForce_getExtrapolationCoefficients(
      PointerByReference target);
  /**
   * Original signature : <code>
   * void OpenMM_HippoNonbondedForce_setExtrapolationCoefficients(OpenMM_HippoNonbondedForce*, const OpenMM_DoubleArray*)
   * </code>
   */
  public static native void OpenMM_HippoNonbondedForce_setExtrapolationCoefficients(
      PointerByReference target, PointerByReference coefficients);
  /**
   * Original signature : <code>
   * void OpenMM_HippoNonbondedForce_getPMEParameters(const OpenMM_HippoNonbondedForce*, double*, int*, int*, int*)
   * </code>
   */
  public static native void OpenMM_HippoNonbondedForce_getPMEParameters(
      PointerByReference target, DoubleBuffer alpha, IntBuffer nx, IntBuffer ny, IntBuffer nz);
  /**
   * Original signature : <code>
   * void OpenMM_HippoNonbondedForce_getPMEParameters(const OpenMM_HippoNonbondedForce*, double*, int*, int*, int*)
   * </code>
   */
  public static native void OpenMM_HippoNonbondedForce_getPMEParameters(
      PointerByReference target,
      DoubleByReference alpha,
      IntByReference nx,
      IntByReference ny,
      IntByReference nz);
  /**
   * Original signature : <code>
   * void OpenMM_HippoNonbondedForce_getDPMEParameters(const OpenMM_HippoNonbondedForce*, double*, int*, int*, int*)
   * </code>
   */
  public static native void OpenMM_HippoNonbondedForce_getDPMEParameters(
      PointerByReference target, DoubleBuffer alpha, IntBuffer nx, IntBuffer ny, IntBuffer nz);
  /**
   * Original signature : <code>
   * void OpenMM_HippoNonbondedForce_getDPMEParameters(const OpenMM_HippoNonbondedForce*, double*, int*, int*, int*)
   * </code>
   */
  public static native void OpenMM_HippoNonbondedForce_getDPMEParameters(
      PointerByReference target,
      DoubleByReference alpha,
      IntByReference nx,
      IntByReference ny,
      IntByReference nz);
  /**
   * Original signature : <code>
   * void OpenMM_HippoNonbondedForce_setPMEParameters(OpenMM_HippoNonbondedForce*, double, int, int, int)
   * </code>
   */
  public static native void OpenMM_HippoNonbondedForce_setPMEParameters(
      PointerByReference target, double alpha, int nx, int ny, int nz);
  /**
   * Original signature : <code>
   * void OpenMM_HippoNonbondedForce_setDPMEParameters(OpenMM_HippoNonbondedForce*, double, int, int, int)
   * </code>
   */
  public static native void OpenMM_HippoNonbondedForce_setDPMEParameters(
      PointerByReference target, double alpha, int nx, int ny, int nz);
  /**
   * Original signature : <code>
   * void OpenMM_HippoNonbondedForce_getPMEParametersInContext(const OpenMM_HippoNonbondedForce*, const OpenMM_Context*, double*, int*, int*, int*)
   * </code>
   */
  public static native void OpenMM_HippoNonbondedForce_getPMEParametersInContext(
      PointerByReference target,
      PointerByReference context,
      DoubleBuffer alpha,
      IntBuffer nx,
      IntBuffer ny,
      IntBuffer nz);
  /**
   * Original signature : <code>
   * void OpenMM_HippoNonbondedForce_getPMEParametersInContext(const OpenMM_HippoNonbondedForce*, const OpenMM_Context*, double*, int*, int*, int*)
   * </code>
   */
  public static native void OpenMM_HippoNonbondedForce_getPMEParametersInContext(
      PointerByReference target,
      PointerByReference context,
      DoubleByReference alpha,
      IntByReference nx,
      IntByReference ny,
      IntByReference nz);
  /**
   * Original signature : <code>
   * void OpenMM_HippoNonbondedForce_getDPMEParametersInContext(const OpenMM_HippoNonbondedForce*, const OpenMM_Context*, double*, int*, int*, int*)
   * </code>
   */
  public static native void OpenMM_HippoNonbondedForce_getDPMEParametersInContext(
      PointerByReference target,
      PointerByReference context,
      DoubleBuffer alpha,
      IntBuffer nx,
      IntBuffer ny,
      IntBuffer nz);
  /**
   * Original signature : <code>
   * void OpenMM_HippoNonbondedForce_getDPMEParametersInContext(const OpenMM_HippoNonbondedForce*, const OpenMM_Context*, double*, int*, int*, int*)
   * </code>
   */
  public static native void OpenMM_HippoNonbondedForce_getDPMEParametersInContext(
      PointerByReference target,
      PointerByReference context,
      DoubleByReference alpha,
      IntByReference nx,
      IntByReference ny,
      IntByReference nz);
  /**
   * Original signature : <code>
   * int OpenMM_HippoNonbondedForce_addParticle(OpenMM_HippoNonbondedForce*, double, const OpenMM_DoubleArray*, const OpenMM_DoubleArray*, double, double, double, double, double, double, double, double, double, int, int, int, int)
   * </code>
   */
  public static native int OpenMM_HippoNonbondedForce_addParticle(
      PointerByReference target,
      double charge,
      PointerByReference dipole,
      PointerByReference quadrupole,
      double coreCharge,
      double alpha,
      double epsilon,
      double damping,
      double c6,
      double pauliK,
      double pauliQ,
      double pauliAlpha,
      double polarizability,
      int axisType,
      int multipoleAtomZ,
      int multipoleAtomX,
      int multipoleAtomY);
  /**
   * Original signature : <code>
   * void OpenMM_HippoNonbondedForce_getParticleParameters(const OpenMM_HippoNonbondedForce*, int, double*, OpenMM_DoubleArray*, OpenMM_DoubleArray*, double*, double*, double*, double*, double*, double*, double*, double*, double*, int*, int*, int*, int*)
   * </code>
   */
  public static native void OpenMM_HippoNonbondedForce_getParticleParameters(
      PointerByReference target,
      int index,
      DoubleBuffer charge,
      PointerByReference dipole,
      PointerByReference quadrupole,
      DoubleBuffer coreCharge,
      DoubleBuffer alpha,
      DoubleBuffer epsilon,
      DoubleBuffer damping,
      DoubleBuffer c6,
      DoubleBuffer pauliK,
      DoubleBuffer pauliQ,
      DoubleBuffer pauliAlpha,
      DoubleBuffer polarizability,
      IntBuffer axisType,
      IntBuffer multipoleAtomZ,
      IntBuffer multipoleAtomX,
      IntBuffer multipoleAtomY);
  /**
   * Original signature : <code>
   * void OpenMM_HippoNonbondedForce_getParticleParameters(const OpenMM_HippoNonbondedForce*, int, double*, OpenMM_DoubleArray*, OpenMM_DoubleArray*, double*, double*, double*, double*, double*, double*, double*, double*, double*, int*, int*, int*, int*)
   * </code>
   */
  public static native void OpenMM_HippoNonbondedForce_getParticleParameters(
      PointerByReference target,
      int index,
      DoubleByReference charge,
      PointerByReference dipole,
      PointerByReference quadrupole,
      DoubleByReference coreCharge,
      DoubleByReference alpha,
      DoubleByReference epsilon,
      DoubleByReference damping,
      DoubleByReference c6,
      DoubleByReference pauliK,
      DoubleByReference pauliQ,
      DoubleByReference pauliAlpha,
      DoubleByReference polarizability,
      IntByReference axisType,
      IntByReference multipoleAtomZ,
      IntByReference multipoleAtomX,
      IntByReference multipoleAtomY);
  /**
   * Original signature : <code>
   * void OpenMM_HippoNonbondedForce_setParticleParameters(OpenMM_HippoNonbondedForce*, int, double, const OpenMM_DoubleArray*, const OpenMM_DoubleArray*, double, double, double, double, double, double, double, double, double, int, int, int, int)
   * </code>
   */
  public static native void OpenMM_HippoNonbondedForce_setParticleParameters(
      PointerByReference target,
      int index,
      double charge,
      PointerByReference dipole,
      PointerByReference quadrupole,
      double coreCharge,
      double alpha,
      double epsilon,
      double damping,
      double c6,
      double pauliK,
      double pauliQ,
      double pauliAlpha,
      double polarizability,
      int axisType,
      int multipoleAtomZ,
      int multipoleAtomX,
      int multipoleAtomY);
  /**
   * Original signature : <code>
   * int OpenMM_HippoNonbondedForce_addException(OpenMM_HippoNonbondedForce*, int, int, double, double, double, double, double, double, OpenMM_Boolean)
   * </code>
   */
  public static native int OpenMM_HippoNonbondedForce_addException(
      PointerByReference target,
      int particle1,
      int particle2,
      double multipoleMultipoleScale,
      double dipoleMultipoleScale,
      double dipoleDipoleScale,
      double dispersionScale,
      double repulsionScale,
      double chargeTransferScale,
      int replace);
  /**
   * Original signature : <code>
   * void OpenMM_HippoNonbondedForce_getExceptionParameters(const OpenMM_HippoNonbondedForce*, int, int*, int*, double*, double*, double*, double*, double*, double*)
   * </code>
   */
  public static native void OpenMM_HippoNonbondedForce_getExceptionParameters(
      PointerByReference target,
      int index,
      IntBuffer particle1,
      IntBuffer particle2,
      DoubleBuffer multipoleMultipoleScale,
      DoubleBuffer dipoleMultipoleScale,
      DoubleBuffer dipoleDipoleScale,
      DoubleBuffer dispersionScale,
      DoubleBuffer repulsionScale,
      DoubleBuffer chargeTransferScale);
  /**
   * Original signature : <code>
   * void OpenMM_HippoNonbondedForce_getExceptionParameters(const OpenMM_HippoNonbondedForce*, int, int*, int*, double*, double*, double*, double*, double*, double*)
   * </code>
   */
  public static native void OpenMM_HippoNonbondedForce_getExceptionParameters(
      PointerByReference target,
      int index,
      IntByReference particle1,
      IntByReference particle2,
      DoubleByReference multipoleMultipoleScale,
      DoubleByReference dipoleMultipoleScale,
      DoubleByReference dipoleDipoleScale,
      DoubleByReference dispersionScale,
      DoubleByReference repulsionScale,
      DoubleByReference chargeTransferScale);
  /**
   * Original signature : <code>
   * void OpenMM_HippoNonbondedForce_setExceptionParameters(OpenMM_HippoNonbondedForce*, int, int, int, double, double, double, double, double, double)
   * </code>
   */
  public static native void OpenMM_HippoNonbondedForce_setExceptionParameters(
      PointerByReference target,
      int index,
      int particle1,
      int particle2,
      double multipoleMultipoleScale,
      double dipoleMultipoleScale,
      double dipoleDipoleScale,
      double dispersionScale,
      double repulsionScale,
      double chargeTransferScale);
  /**
   * Original signature : <code>
   * double OpenMM_HippoNonbondedForce_getEwaldErrorTolerance(const OpenMM_HippoNonbondedForce*)
   * </code>
   */
  public static native double OpenMM_HippoNonbondedForce_getEwaldErrorTolerance(
      PointerByReference target);
  /**
   * Original signature : <code>
   * void OpenMM_HippoNonbondedForce_setEwaldErrorTolerance(OpenMM_HippoNonbondedForce*, double)
   * </code>
   */
  public static native void OpenMM_HippoNonbondedForce_setEwaldErrorTolerance(
      PointerByReference target, double tol);
  /**
   * Original signature : <code>
   * void OpenMM_HippoNonbondedForce_getLabFramePermanentDipoles(OpenMM_HippoNonbondedForce*, OpenMM_Context*, OpenMM_Vec3Array*)
   * </code>
   */
  public static native void OpenMM_HippoNonbondedForce_getLabFramePermanentDipoles(
      PointerByReference target, PointerByReference context, PointerByReference dipoles);
  /**
   * Original signature : <code>
   * void OpenMM_HippoNonbondedForce_getInducedDipoles(OpenMM_HippoNonbondedForce*, OpenMM_Context*, OpenMM_Vec3Array*)
   * </code>
   */
  public static native void OpenMM_HippoNonbondedForce_getInducedDipoles(
      PointerByReference target, PointerByReference context, PointerByReference dipoles);
  /**
   * Original signature : <code>
   * void OpenMM_HippoNonbondedForce_updateParametersInContext(OpenMM_HippoNonbondedForce*, OpenMM_Context*)
   * </code>
   */
  public static native void OpenMM_HippoNonbondedForce_updateParametersInContext(
      PointerByReference target, PointerByReference context);
  /**
   * Original signature : <code>
   * OpenMM_Boolean OpenMM_HippoNonbondedForce_usesPeriodicBoundaryConditions(const OpenMM_HippoNonbondedForce*)
   * </code>
   */
  public static native int OpenMM_HippoNonbondedForce_usesPeriodicBoundaryConditions(
      PointerByReference target);
  /**
   * Original signature : <code>
   * OpenMM_AmoebaGKCavitationForce* OpenMM_AmoebaGKCavitationForce_create()</code>
   */
  public static native PointerByReference OpenMM_AmoebaGKCavitationForce_create();
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaGKCavitationForce_destroy(OpenMM_AmoebaGKCavitationForce*)</code>
   */
  public static native void OpenMM_AmoebaGKCavitationForce_destroy(PointerByReference target);
  /**
   * Original signature : <code>
   * int OpenMM_AmoebaGKCavitationForce_addParticle(OpenMM_AmoebaGKCavitationForce*, double, double, OpenMM_Boolean)
   * </code>
   */
  public static native int OpenMM_AmoebaGKCavitationForce_addParticle(
      PointerByReference target, double radius, double gamma, int ishydrogen);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaGKCavitationForce_setParticleParameters(OpenMM_AmoebaGKCavitationForce*, int, double, double, OpenMM_Boolean)
   * </code>
   */
  public static native void OpenMM_AmoebaGKCavitationForce_setParticleParameters(
      PointerByReference target, int index, double radius, double gamma, int ishydrogen);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaGKCavitationForce_getParticleParameters(const OpenMM_AmoebaGKCavitationForce*, int, double*, double*, OpenMM_Boolean*)
   * </code>
   */
  public static native void OpenMM_AmoebaGKCavitationForce_getParticleParameters(
      PointerByReference target,
      int index,
      DoubleBuffer radius,
      DoubleBuffer gamma,
      IntBuffer ishydrogen);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaGKCavitationForce_getParticleParameters(const OpenMM_AmoebaGKCavitationForce*, int, double*, double*, OpenMM_Boolean*)
   * </code>
   */
  public static native void OpenMM_AmoebaGKCavitationForce_getParticleParameters(
      PointerByReference target,
      int index,
      DoubleByReference radius,
      DoubleByReference gamma,
      IntByReference ishydrogen);
  /**
   * Original signature : <code>
   * int OpenMM_AmoebaGKCavitationForce_getNumParticles(const OpenMM_AmoebaGKCavitationForce*)
   * </code>
   */
  public static native int OpenMM_AmoebaGKCavitationForce_getNumParticles(
      PointerByReference target);
  /**
   * Original signature : <code>
   * OpenMM_AmoebaGKCavitationForce_NonbondedMethod OpenMM_AmoebaGKCavitationForce_getNonbondedMethod(const OpenMM_AmoebaGKCavitationForce*)
   * </code>
   */
  public static native int OpenMM_AmoebaGKCavitationForce_getNonbondedMethod(
      PointerByReference target);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaGKCavitationForce_setNonbondedMethod(OpenMM_AmoebaGKCavitationForce*, OpenMM_AmoebaGKCavitationForce_NonbondedMethod)
   * </code>
   */
  public static native void OpenMM_AmoebaGKCavitationForce_setNonbondedMethod(
      PointerByReference target, int method);
  /**
   * Original signature : <code>
   * double OpenMM_AmoebaGKCavitationForce_getCutoffDistance(const OpenMM_AmoebaGKCavitationForce*)
   * </code>
   */
  public static native double OpenMM_AmoebaGKCavitationForce_getCutoffDistance(
      PointerByReference target);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaGKCavitationForce_setCutoffDistance(OpenMM_AmoebaGKCavitationForce*, double)
   * </code>
   */
  public static native void OpenMM_AmoebaGKCavitationForce_setCutoffDistance(
      PointerByReference target, double distance);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaGKCavitationForce_updateParametersInContext(OpenMM_AmoebaGKCavitationForce*, OpenMM_Context*)
   * </code>
   */
  public static native void OpenMM_AmoebaGKCavitationForce_updateParametersInContext(
      PointerByReference target, PointerByReference context);
  /**
   * AmoebaGeneralizedKirkwoodForce<br>
   * Original signature : <code>
   * OpenMM_AmoebaGeneralizedKirkwoodForce* OpenMM_AmoebaGeneralizedKirkwoodForce_create()</code>
   */
  public static native PointerByReference OpenMM_AmoebaGeneralizedKirkwoodForce_create();
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaGeneralizedKirkwoodForce_destroy(OpenMM_AmoebaGeneralizedKirkwoodForce*)
   * </code>
   */
  public static native void OpenMM_AmoebaGeneralizedKirkwoodForce_destroy(
      PointerByReference target);
  /**
   * Original signature : <code>
   * int OpenMM_AmoebaGeneralizedKirkwoodForce_getNumParticles(const OpenMM_AmoebaGeneralizedKirkwoodForce*)
   * </code>
   */
  public static native int OpenMM_AmoebaGeneralizedKirkwoodForce_getNumParticles(
      PointerByReference target);
  /**
   * Original signature : <code>
   * int OpenMM_AmoebaGeneralizedKirkwoodForce_addParticle(OpenMM_AmoebaGeneralizedKirkwoodForce*, double, double, double)
   * </code>
   */
  public static native int OpenMM_AmoebaGeneralizedKirkwoodForce_addParticle(
      PointerByReference target, double charge, double radius, double scalingFactor);
  /**
   * Original signature : <code>
   * int OpenMM_AmoebaGeneralizedKirkwoodForce_addParticle_1(OpenMM_AmoebaGeneralizedKirkwoodForce*, double, double, double, double, double)
   * </code>
   */
  public static native int OpenMM_AmoebaGeneralizedKirkwoodForce_addParticle_1(
      PointerByReference target,
      double charge,
      double radius,
      double scalingFactor,
      double descreenRadius,
      double neckFactor);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaGeneralizedKirkwoodForce_getParticleParameters(const OpenMM_AmoebaGeneralizedKirkwoodForce*, int, double*, double*, double*)
   * </code>
   */
  public static native void OpenMM_AmoebaGeneralizedKirkwoodForce_getParticleParameters(
      PointerByReference target,
      int index,
      DoubleBuffer charge,
      DoubleBuffer radius,
      DoubleBuffer scalingFactor);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaGeneralizedKirkwoodForce_getParticleParameters(const OpenMM_AmoebaGeneralizedKirkwoodForce*, int, double*, double*, double*)
   * </code>
   */
  public static native void OpenMM_AmoebaGeneralizedKirkwoodForce_getParticleParameters(
      PointerByReference target,
      int index,
      DoubleByReference charge,
      DoubleByReference radius,
      DoubleByReference scalingFactor);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaGeneralizedKirkwoodForce_getParticleParameters_1(const OpenMM_AmoebaGeneralizedKirkwoodForce*, int, double*, double*, double*, double*, double*)
   * </code>
   */
  public static native void OpenMM_AmoebaGeneralizedKirkwoodForce_getParticleParameters_1(
      PointerByReference target,
      int index,
      DoubleBuffer charge,
      DoubleBuffer radius,
      DoubleBuffer scalingFactor,
      DoubleBuffer descreenRadius,
      DoubleBuffer neckFactor);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaGeneralizedKirkwoodForce_getParticleParameters_1(const OpenMM_AmoebaGeneralizedKirkwoodForce*, int, double*, double*, double*, double*, double*)
   * </code>
   */
  public static native void OpenMM_AmoebaGeneralizedKirkwoodForce_getParticleParameters_1(
      PointerByReference target,
      int index,
      DoubleByReference charge,
      DoubleByReference radius,
      DoubleByReference scalingFactor,
      DoubleByReference descreenRadius,
      DoubleByReference neckFactor);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaGeneralizedKirkwoodForce_setParticleParameters(OpenMM_AmoebaGeneralizedKirkwoodForce*, int, double, double, double)
   * </code>
   */
  public static native void OpenMM_AmoebaGeneralizedKirkwoodForce_setParticleParameters(
      PointerByReference target, int index, double charge, double radius, double scalingFactor);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaGeneralizedKirkwoodForce_setParticleParameters_1(OpenMM_AmoebaGeneralizedKirkwoodForce*, int, double, double, double, double, double)
   * </code>
   */
  public static native void OpenMM_AmoebaGeneralizedKirkwoodForce_setParticleParameters_1(
      PointerByReference target,
      int index,
      double charge,
      double radius,
      double scalingFactor,
      double descreenRadius,
      double neckFactor);
  /**
   * Original signature : <code>
   * double OpenMM_AmoebaGeneralizedKirkwoodForce_getSolventDielectric(const OpenMM_AmoebaGeneralizedKirkwoodForce*)
   * </code>
   */
  public static native double OpenMM_AmoebaGeneralizedKirkwoodForce_getSolventDielectric(
      PointerByReference target);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaGeneralizedKirkwoodForce_setSolventDielectric(OpenMM_AmoebaGeneralizedKirkwoodForce*, double)
   * </code>
   */
  public static native void OpenMM_AmoebaGeneralizedKirkwoodForce_setSolventDielectric(
      PointerByReference target, double dielectric);
  /**
   * Original signature : <code>
   * double OpenMM_AmoebaGeneralizedKirkwoodForce_getSoluteDielectric(const OpenMM_AmoebaGeneralizedKirkwoodForce*)
   * </code>
   */
  public static native double OpenMM_AmoebaGeneralizedKirkwoodForce_getSoluteDielectric(
      PointerByReference target);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaGeneralizedKirkwoodForce_setSoluteDielectric(OpenMM_AmoebaGeneralizedKirkwoodForce*, double)
   * </code>
   */
  public static native void OpenMM_AmoebaGeneralizedKirkwoodForce_setSoluteDielectric(
      PointerByReference target, double dielectric);
  /**
   * Original signature : <code>
   * int OpenMM_AmoebaGeneralizedKirkwoodForce_getTanhRescaling(const OpenMM_AmoebaGeneralizedKirkwoodForce*)
   * </code>
   */
  public static native int OpenMM_AmoebaGeneralizedKirkwoodForce_getTanhRescaling(
      PointerByReference target);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaGeneralizedKirkwoodForce_setTanhRescaling(OpenMM_AmoebaGeneralizedKirkwoodForce*, int)
   * </code>
   */
  public static native void OpenMM_AmoebaGeneralizedKirkwoodForce_setTanhRescaling(
      PointerByReference target, int tanhRescale);
  /**
   * Original signature : <code>
   * int OpenMM_AmoebaGeneralizedKirkwoodForce_getIncludeCavityTerm(const OpenMM_AmoebaGeneralizedKirkwoodForce*)
   * </code>
   */
  public static native int OpenMM_AmoebaGeneralizedKirkwoodForce_getIncludeCavityTerm(
      PointerByReference target);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaGeneralizedKirkwoodForce_setIncludeCavityTerm(OpenMM_AmoebaGeneralizedKirkwoodForce*, int)
   * </code>
   */
  public static native void OpenMM_AmoebaGeneralizedKirkwoodForce_setIncludeCavityTerm(
      PointerByReference target, int includeCavityTerm);
  /**
   * Original signature : <code>
   * double OpenMM_AmoebaGeneralizedKirkwoodForce_getProbeRadius(const OpenMM_AmoebaGeneralizedKirkwoodForce*)
   * </code>
   */
  public static native double OpenMM_AmoebaGeneralizedKirkwoodForce_getProbeRadius(
      PointerByReference target);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaGeneralizedKirkwoodForce_setProbeRadius(OpenMM_AmoebaGeneralizedKirkwoodForce*, double)
   * </code>
   */
  public static native void OpenMM_AmoebaGeneralizedKirkwoodForce_setProbeRadius(
      PointerByReference target, double probeRadius);
  /**
   * Original signature : <code>
   * double OpenMM_AmoebaGeneralizedKirkwoodForce_getSurfaceAreaFactor(const OpenMM_AmoebaGeneralizedKirkwoodForce*)
   * </code>
   */
  public static native double OpenMM_AmoebaGeneralizedKirkwoodForce_getSurfaceAreaFactor(
      PointerByReference target);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaGeneralizedKirkwoodForce_setSurfaceAreaFactor(OpenMM_AmoebaGeneralizedKirkwoodForce*, double)
   * </code>
   */
  public static native void OpenMM_AmoebaGeneralizedKirkwoodForce_setSurfaceAreaFactor(
      PointerByReference target, double surfaceAreaFactor);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaGeneralizedKirkwoodForce_updateParametersInContext(OpenMM_AmoebaGeneralizedKirkwoodForce*, OpenMM_Context*)
   * </code>
   */
  public static native void OpenMM_AmoebaGeneralizedKirkwoodForce_updateParametersInContext(
      PointerByReference target, PointerByReference context);
  /**
   * Original signature : <code>
   * OpenMM_Boolean OpenMM_AmoebaGeneralizedKirkwoodForce_usesPeriodicBoundaryConditions(const OpenMM_AmoebaGeneralizedKirkwoodForce*)
   * </code>
   */
  public static native int OpenMM_AmoebaGeneralizedKirkwoodForce_usesPeriodicBoundaryConditions(
      PointerByReference target);
  /**
   * Original signature : <code>OpenMM_AmoebaMultipoleForce* OpenMM_AmoebaMultipoleForce_create()
   * </code>
   */
  public static native PointerByReference OpenMM_AmoebaMultipoleForce_create();
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaMultipoleForce_destroy(OpenMM_AmoebaMultipoleForce*)</code>
   */
  public static native void OpenMM_AmoebaMultipoleForce_destroy(PointerByReference target);
  /**
   * Original signature : <code>
   * int OpenMM_AmoebaMultipoleForce_getNumMultipoles(const OpenMM_AmoebaMultipoleForce*)</code>
   */
  public static native int OpenMM_AmoebaMultipoleForce_getNumMultipoles(PointerByReference target);
  /**
   * Original signature : <code>
   * OpenMM_AmoebaMultipoleForce_NonbondedMethod OpenMM_AmoebaMultipoleForce_getNonbondedMethod(const OpenMM_AmoebaMultipoleForce*)
   * </code>
   */
  public static native int OpenMM_AmoebaMultipoleForce_getNonbondedMethod(
      PointerByReference target);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaMultipoleForce_setNonbondedMethod(OpenMM_AmoebaMultipoleForce*, OpenMM_AmoebaMultipoleForce_NonbondedMethod)
   * </code>
   */
  public static native void OpenMM_AmoebaMultipoleForce_setNonbondedMethod(
      PointerByReference target, int method);
  /**
   * Original signature : <code>
   * OpenMM_AmoebaMultipoleForce_PolarizationType OpenMM_AmoebaMultipoleForce_getPolarizationType(const OpenMM_AmoebaMultipoleForce*)
   * </code>
   */
  public static native int OpenMM_AmoebaMultipoleForce_getPolarizationType(
      PointerByReference target);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaMultipoleForce_setPolarizationType(OpenMM_AmoebaMultipoleForce*, OpenMM_AmoebaMultipoleForce_PolarizationType)
   * </code>
   */
  public static native void OpenMM_AmoebaMultipoleForce_setPolarizationType(
      PointerByReference target, int type);
  /**
   * Original signature : <code>
   * double OpenMM_AmoebaMultipoleForce_getCutoffDistance(const OpenMM_AmoebaMultipoleForce*)</code>
   */
  public static native double OpenMM_AmoebaMultipoleForce_getCutoffDistance(
      PointerByReference target);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaMultipoleForce_setCutoffDistance(OpenMM_AmoebaMultipoleForce*, double)</code>
   */
  public static native void OpenMM_AmoebaMultipoleForce_setCutoffDistance(
      PointerByReference target, double distance);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaMultipoleForce_getPMEParameters(const OpenMM_AmoebaMultipoleForce*, double*, int*, int*, int*)
   * </code>
   */
  public static native void OpenMM_AmoebaMultipoleForce_getPMEParameters(
      PointerByReference target, DoubleBuffer alpha, IntBuffer nx, IntBuffer ny, IntBuffer nz);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaMultipoleForce_getPMEParameters(const OpenMM_AmoebaMultipoleForce*, double*, int*, int*, int*)
   * </code>
   */
  public static native void OpenMM_AmoebaMultipoleForce_getPMEParameters(
      PointerByReference target,
      DoubleByReference alpha,
      IntByReference nx,
      IntByReference ny,
      IntByReference nz);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaMultipoleForce_setPMEParameters(OpenMM_AmoebaMultipoleForce*, double, int, int, int)
   * </code>
   */
  public static native void OpenMM_AmoebaMultipoleForce_setPMEParameters(
      PointerByReference target, double alpha, int nx, int ny, int nz);
  /**
   * Original signature : <code>
   * double OpenMM_AmoebaMultipoleForce_getAEwald(const OpenMM_AmoebaMultipoleForce*)</code>
   */
  public static native double OpenMM_AmoebaMultipoleForce_getAEwald(PointerByReference target);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaMultipoleForce_setAEwald(OpenMM_AmoebaMultipoleForce*, double)</code>
   */
  public static native void OpenMM_AmoebaMultipoleForce_setAEwald(
      PointerByReference target, double aewald);
  /**
   * Original signature : <code>
   * int OpenMM_AmoebaMultipoleForce_getPmeBSplineOrder(const OpenMM_AmoebaMultipoleForce*)</code>
   */
  public static native int OpenMM_AmoebaMultipoleForce_getPmeBSplineOrder(
      PointerByReference target);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaMultipoleForce_getPmeGridDimensions(const OpenMM_AmoebaMultipoleForce*, OpenMM_IntArray*)
   * </code>
   */
  public static native void OpenMM_AmoebaMultipoleForce_getPmeGridDimensions(
      PointerByReference target, PointerByReference gridDimension);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaMultipoleForce_setPmeGridDimensions(OpenMM_AmoebaMultipoleForce*, const OpenMM_IntArray*)
   * </code>
   */
  public static native void OpenMM_AmoebaMultipoleForce_setPmeGridDimensions(
      PointerByReference target, PointerByReference gridDimension);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaMultipoleForce_getPMEParametersInContext(const OpenMM_AmoebaMultipoleForce*, const OpenMM_Context*, double*, int*, int*, int*)
   * </code>
   */
  public static native void OpenMM_AmoebaMultipoleForce_getPMEParametersInContext(
      PointerByReference target,
      PointerByReference context,
      DoubleBuffer alpha,
      IntBuffer nx,
      IntBuffer ny,
      IntBuffer nz);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaMultipoleForce_getPMEParametersInContext(const OpenMM_AmoebaMultipoleForce*, const OpenMM_Context*, double*, int*, int*, int*)
   * </code>
   */
  public static native void OpenMM_AmoebaMultipoleForce_getPMEParametersInContext(
      PointerByReference target,
      PointerByReference context,
      DoubleByReference alpha,
      IntByReference nx,
      IntByReference ny,
      IntByReference nz);
  /**
   * Original signature : <code>
   * int OpenMM_AmoebaMultipoleForce_addMultipole(OpenMM_AmoebaMultipoleForce*, double, const OpenMM_DoubleArray*, const OpenMM_DoubleArray*, int, int, int, int, double, double, double)
   * </code>
   */
  public static native int OpenMM_AmoebaMultipoleForce_addMultipole(
      PointerByReference target,
      double charge,
      PointerByReference molecularDipole,
      PointerByReference molecularQuadrupole,
      int axisType,
      int multipoleAtomZ,
      int multipoleAtomX,
      int multipoleAtomY,
      double thole,
      double dampingFactor,
      double polarity);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaMultipoleForce_getMultipoleParameters(const OpenMM_AmoebaMultipoleForce*, int, double*, OpenMM_DoubleArray*, OpenMM_DoubleArray*, int*, int*, int*, int*, double*, double*, double*)
   * </code>
   */
  public static native void OpenMM_AmoebaMultipoleForce_getMultipoleParameters(
      PointerByReference target,
      int index,
      DoubleBuffer charge,
      PointerByReference molecularDipole,
      PointerByReference molecularQuadrupole,
      IntBuffer axisType,
      IntBuffer multipoleAtomZ,
      IntBuffer multipoleAtomX,
      IntBuffer multipoleAtomY,
      DoubleBuffer thole,
      DoubleBuffer dampingFactor,
      DoubleBuffer polarity);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaMultipoleForce_getMultipoleParameters(const OpenMM_AmoebaMultipoleForce*, int, double*, OpenMM_DoubleArray*, OpenMM_DoubleArray*, int*, int*, int*, int*, double*, double*, double*)
   * </code>
   */
  public static native void OpenMM_AmoebaMultipoleForce_getMultipoleParameters(
      PointerByReference target,
      int index,
      DoubleByReference charge,
      PointerByReference molecularDipole,
      PointerByReference molecularQuadrupole,
      IntByReference axisType,
      IntByReference multipoleAtomZ,
      IntByReference multipoleAtomX,
      IntByReference multipoleAtomY,
      DoubleByReference thole,
      DoubleByReference dampingFactor,
      DoubleByReference polarity);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaMultipoleForce_setMultipoleParameters(OpenMM_AmoebaMultipoleForce*, int, double, const OpenMM_DoubleArray*, const OpenMM_DoubleArray*, int, int, int, int, double, double, double)
   * </code>
   */
  public static native void OpenMM_AmoebaMultipoleForce_setMultipoleParameters(
      PointerByReference target,
      int index,
      double charge,
      PointerByReference molecularDipole,
      PointerByReference molecularQuadrupole,
      int axisType,
      int multipoleAtomZ,
      int multipoleAtomX,
      int multipoleAtomY,
      double thole,
      double dampingFactor,
      double polarity);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaMultipoleForce_setCovalentMap(OpenMM_AmoebaMultipoleForce*, int, OpenMM_AmoebaMultipoleForce_CovalentType, const OpenMM_IntArray*)
   * </code>
   */
  public static native void OpenMM_AmoebaMultipoleForce_setCovalentMap(
      PointerByReference target, int index, int typeId, PointerByReference covalentAtoms);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaMultipoleForce_getCovalentMap(const OpenMM_AmoebaMultipoleForce*, int, OpenMM_AmoebaMultipoleForce_CovalentType, OpenMM_IntArray*)
   * </code>
   */
  public static native void OpenMM_AmoebaMultipoleForce_getCovalentMap(
      PointerByReference target, int index, int typeId, PointerByReference covalentAtoms);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaMultipoleForce_getCovalentMaps(const OpenMM_AmoebaMultipoleForce*, int, OpenMM_2D_IntArray*)
   * </code>
   */
  public static native void OpenMM_AmoebaMultipoleForce_getCovalentMaps(
      PointerByReference target, int index, PointerByReference covalentLists);
  /**
   * Original signature : <code>
   * int OpenMM_AmoebaMultipoleForce_getMutualInducedMaxIterations(const OpenMM_AmoebaMultipoleForce*)
   * </code>
   */
  public static native int OpenMM_AmoebaMultipoleForce_getMutualInducedMaxIterations(
      PointerByReference target);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaMultipoleForce_setMutualInducedMaxIterations(OpenMM_AmoebaMultipoleForce*, int)
   * </code>
   */
  public static native void OpenMM_AmoebaMultipoleForce_setMutualInducedMaxIterations(
      PointerByReference target, int inputMutualInducedMaxIterations);
  /**
   * Original signature : <code>
   * double OpenMM_AmoebaMultipoleForce_getMutualInducedTargetEpsilon(const OpenMM_AmoebaMultipoleForce*)
   * </code>
   */
  public static native double OpenMM_AmoebaMultipoleForce_getMutualInducedTargetEpsilon(
      PointerByReference target);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaMultipoleForce_setMutualInducedTargetEpsilon(OpenMM_AmoebaMultipoleForce*, double)
   * </code>
   */
  public static native void OpenMM_AmoebaMultipoleForce_setMutualInducedTargetEpsilon(
      PointerByReference target, double inputMutualInducedTargetEpsilon);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaMultipoleForce_setExtrapolationCoefficients(OpenMM_AmoebaMultipoleForce*, const OpenMM_DoubleArray*)
   * </code>
   */
  public static native void OpenMM_AmoebaMultipoleForce_setExtrapolationCoefficients(
      PointerByReference target, PointerByReference coefficients);
  /**
   * Original signature : <code>
   * OpenMM_DoubleArray* OpenMM_AmoebaMultipoleForce_getExtrapolationCoefficients(const OpenMM_AmoebaMultipoleForce*)
   * </code>
   */
  public static native PointerByReference OpenMM_AmoebaMultipoleForce_getExtrapolationCoefficients(
      PointerByReference target);
  /**
   * Original signature : <code>
   * double OpenMM_AmoebaMultipoleForce_getEwaldErrorTolerance(const OpenMM_AmoebaMultipoleForce*)
   * </code>
   */
  public static native double OpenMM_AmoebaMultipoleForce_getEwaldErrorTolerance(
      PointerByReference target);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaMultipoleForce_setEwaldErrorTolerance(OpenMM_AmoebaMultipoleForce*, double)
   * </code>
   */
  public static native void OpenMM_AmoebaMultipoleForce_setEwaldErrorTolerance(
      PointerByReference target, double tol);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaMultipoleForce_getLabFramePermanentDipoles(OpenMM_AmoebaMultipoleForce*, OpenMM_Context*, OpenMM_Vec3Array*)
   * </code>
   */
  public static native void OpenMM_AmoebaMultipoleForce_getLabFramePermanentDipoles(
      PointerByReference target, PointerByReference context, PointerByReference dipoles);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaMultipoleForce_getInducedDipoles(OpenMM_AmoebaMultipoleForce*, OpenMM_Context*, OpenMM_Vec3Array*)
   * </code>
   */
  public static native void OpenMM_AmoebaMultipoleForce_getInducedDipoles(
      PointerByReference target, PointerByReference context, PointerByReference dipoles);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaMultipoleForce_getTotalDipoles(OpenMM_AmoebaMultipoleForce*, OpenMM_Context*, OpenMM_Vec3Array*)
   * </code>
   */
  public static native void OpenMM_AmoebaMultipoleForce_getTotalDipoles(
      PointerByReference target, PointerByReference context, PointerByReference dipoles);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaMultipoleForce_getElectrostaticPotential(OpenMM_AmoebaMultipoleForce*, const OpenMM_Vec3Array*, OpenMM_Context*, OpenMM_DoubleArray*)
   * </code>
   */
  public static native void OpenMM_AmoebaMultipoleForce_getElectrostaticPotential(
      PointerByReference target,
      PointerByReference inputGrid,
      PointerByReference context,
      PointerByReference outputElectrostaticPotential);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaMultipoleForce_getSystemMultipoleMoments(OpenMM_AmoebaMultipoleForce*, OpenMM_Context*, OpenMM_DoubleArray*)
   * </code>
   */
  public static native void OpenMM_AmoebaMultipoleForce_getSystemMultipoleMoments(
      PointerByReference target,
      PointerByReference context,
      PointerByReference outputMultipoleMoments);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaMultipoleForce_updateParametersInContext(OpenMM_AmoebaMultipoleForce*, OpenMM_Context*)
   * </code>
   */
  public static native void OpenMM_AmoebaMultipoleForce_updateParametersInContext(
      PointerByReference target, PointerByReference context);
  /**
   * Original signature : <code>
   * OpenMM_Boolean OpenMM_AmoebaMultipoleForce_usesPeriodicBoundaryConditions(const OpenMM_AmoebaMultipoleForce*)
   * </code>
   */
  public static native int OpenMM_AmoebaMultipoleForce_usesPeriodicBoundaryConditions(
      PointerByReference target);
  /** Original signature : <code>OpenMM_AmoebaVdwForce* OpenMM_AmoebaVdwForce_create()</code> */
  public static native PointerByReference OpenMM_AmoebaVdwForce_create();
  /**
   * Original signature : <code>void OpenMM_AmoebaVdwForce_destroy(OpenMM_AmoebaVdwForce*)</code>
   */
  public static native void OpenMM_AmoebaVdwForce_destroy(PointerByReference target);
  /** Original signature : <code>char* OpenMM_AmoebaVdwForce_Lambda()</code> */
  public static native Pointer OpenMM_AmoebaVdwForce_Lambda();
  /**
   * Original signature : <code>
   * int OpenMM_AmoebaVdwForce_getNumParticles(const OpenMM_AmoebaVdwForce*)</code>
   */
  public static native int OpenMM_AmoebaVdwForce_getNumParticles(PointerByReference target);
  /**
   * Original signature : <code>
   * int OpenMM_AmoebaVdwForce_getNumParticleTypes(const OpenMM_AmoebaVdwForce*)</code>
   */
  public static native int OpenMM_AmoebaVdwForce_getNumParticleTypes(PointerByReference target);
  /**
   * Original signature : <code>
   * int OpenMM_AmoebaVdwForce_getNumTypePairs(const OpenMM_AmoebaVdwForce*)</code>
   */
  public static native int OpenMM_AmoebaVdwForce_getNumTypePairs(PointerByReference target);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaVdwForce_setParticleParameters(OpenMM_AmoebaVdwForce*, int, int, double, double, double, OpenMM_Boolean, int)
   * </code>
   */
  public static native void OpenMM_AmoebaVdwForce_setParticleParameters(
      PointerByReference target,
      int particleIndex,
      int parentIndex,
      double sigma,
      double epsilon,
      double reductionFactor,
      int isAlchemical,
      int typeIndex);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaVdwForce_getParticleParameters(const OpenMM_AmoebaVdwForce*, int, int*, double*, double*, double*, OpenMM_Boolean*, int*)
   * </code>
   */
  public static native void OpenMM_AmoebaVdwForce_getParticleParameters(
      PointerByReference target,
      int particleIndex,
      IntBuffer parentIndex,
      DoubleBuffer sigma,
      DoubleBuffer epsilon,
      DoubleBuffer reductionFactor,
      IntBuffer isAlchemical,
      IntBuffer typeIndex);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaVdwForce_getParticleParameters(const OpenMM_AmoebaVdwForce*, int, int*, double*, double*, double*, OpenMM_Boolean*, int*)
   * </code>
   */
  public static native void OpenMM_AmoebaVdwForce_getParticleParameters(
      PointerByReference target,
      int particleIndex,
      IntByReference parentIndex,
      DoubleByReference sigma,
      DoubleByReference epsilon,
      DoubleByReference reductionFactor,
      IntByReference isAlchemical,
      IntByReference typeIndex);
  /**
   * Original signature : <code>
   * int OpenMM_AmoebaVdwForce_addParticle(OpenMM_AmoebaVdwForce*, int, double, double, double, OpenMM_Boolean)
   * </code>
   */
  public static native int OpenMM_AmoebaVdwForce_addParticle(
      PointerByReference target,
      int parentIndex,
      double sigma,
      double epsilon,
      double reductionFactor,
      int isAlchemical);
  /**
   * Original signature : <code>
   * int OpenMM_AmoebaVdwForce_addParticle_1(OpenMM_AmoebaVdwForce*, int, int, double, OpenMM_Boolean)
   * </code>
   */
  public static native int OpenMM_AmoebaVdwForce_addParticle_1(
      PointerByReference target,
      int parentIndex,
      int typeIndex,
      double reductionFactor,
      int isAlchemical);
  /**
   * Original signature : <code>
   * int OpenMM_AmoebaVdwForce_addParticleType(OpenMM_AmoebaVdwForce*, double, double)</code>
   */
  public static native int OpenMM_AmoebaVdwForce_addParticleType(
      PointerByReference target, double sigma, double epsilon);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaVdwForce_getParticleTypeParameters(const OpenMM_AmoebaVdwForce*, int, double*, double*)
   * </code>
   */
  public static native void OpenMM_AmoebaVdwForce_getParticleTypeParameters(
      PointerByReference target, int typeIndex, DoubleBuffer sigma, DoubleBuffer epsilon);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaVdwForce_getParticleTypeParameters(const OpenMM_AmoebaVdwForce*, int, double*, double*)
   * </code>
   */
  public static native void OpenMM_AmoebaVdwForce_getParticleTypeParameters(
      PointerByReference target, int typeIndex, DoubleByReference sigma, DoubleByReference epsilon);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaVdwForce_setParticleTypeParameters(OpenMM_AmoebaVdwForce*, int, double, double)
   * </code>
   */
  public static native void OpenMM_AmoebaVdwForce_setParticleTypeParameters(
      PointerByReference target, int typeIndex, double sigma, double epsilon);
  /**
   * Original signature : <code>
   * int OpenMM_AmoebaVdwForce_addTypePair(OpenMM_AmoebaVdwForce*, int, int, double, double)</code>
   */
  public static native int OpenMM_AmoebaVdwForce_addTypePair(
      PointerByReference target, int type1, int type2, double sigma, double epsilon);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaVdwForce_getTypePairParameters(const OpenMM_AmoebaVdwForce*, int, int*, int*, double*, double*)
   * </code>
   */
  public static native void OpenMM_AmoebaVdwForce_getTypePairParameters(
      PointerByReference target,
      int pairIndex,
      IntBuffer type1,
      IntBuffer type2,
      DoubleBuffer sigma,
      DoubleBuffer epsilon);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaVdwForce_getTypePairParameters(const OpenMM_AmoebaVdwForce*, int, int*, int*, double*, double*)
   * </code>
   */
  public static native void OpenMM_AmoebaVdwForce_getTypePairParameters(
      PointerByReference target,
      int pairIndex,
      IntByReference type1,
      IntByReference type2,
      DoubleByReference sigma,
      DoubleByReference epsilon);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaVdwForce_setTypePairParameters(OpenMM_AmoebaVdwForce*, int, int, int, double, double)
   * </code>
   */
  public static native void OpenMM_AmoebaVdwForce_setTypePairParameters(
      PointerByReference target, int pairIndex, int type1, int type2, double sigma, double epsilon);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaVdwForce_setSigmaCombiningRule(OpenMM_AmoebaVdwForce*, const char*)</code>
   */
  public static native void OpenMM_AmoebaVdwForce_setSigmaCombiningRule(
      PointerByReference target, String sigmaCombiningRule);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaVdwForce_setSigmaCombiningRule(OpenMM_AmoebaVdwForce*, const char*)</code>
   */
  public static native void OpenMM_AmoebaVdwForce_setSigmaCombiningRule(
      PointerByReference target, Pointer sigmaCombiningRule);
  /**
   * Original signature : <code>
   * char* OpenMM_AmoebaVdwForce_getSigmaCombiningRule(const OpenMM_AmoebaVdwForce*)</code>
   */
  public static native Pointer OpenMM_AmoebaVdwForce_getSigmaCombiningRule(
      PointerByReference target);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaVdwForce_setEpsilonCombiningRule(OpenMM_AmoebaVdwForce*, const char*)</code>
   */
  public static native void OpenMM_AmoebaVdwForce_setEpsilonCombiningRule(
      PointerByReference target, String epsilonCombiningRule);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaVdwForce_setEpsilonCombiningRule(OpenMM_AmoebaVdwForce*, const char*)</code>
   */
  public static native void OpenMM_AmoebaVdwForce_setEpsilonCombiningRule(
      PointerByReference target, Pointer epsilonCombiningRule);
  /**
   * Original signature : <code>
   * char* OpenMM_AmoebaVdwForce_getEpsilonCombiningRule(const OpenMM_AmoebaVdwForce*)</code>
   */
  public static native Pointer OpenMM_AmoebaVdwForce_getEpsilonCombiningRule(
      PointerByReference target);
  /**
   * Original signature : <code>
   * OpenMM_Boolean OpenMM_AmoebaVdwForce_getUseDispersionCorrection(const OpenMM_AmoebaVdwForce*)
   * </code>
   */
  public static native int OpenMM_AmoebaVdwForce_getUseDispersionCorrection(
      PointerByReference target);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaVdwForce_setUseDispersionCorrection(OpenMM_AmoebaVdwForce*, OpenMM_Boolean)
   * </code>
   */
  public static native void OpenMM_AmoebaVdwForce_setUseDispersionCorrection(
      PointerByReference target, int useCorrection);
  /**
   * Original signature : <code>
   * OpenMM_Boolean OpenMM_AmoebaVdwForce_getUseParticleTypes(const OpenMM_AmoebaVdwForce*)</code>
   */
  public static native int OpenMM_AmoebaVdwForce_getUseParticleTypes(PointerByReference target);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaVdwForce_setParticleExclusions(OpenMM_AmoebaVdwForce*, int, const OpenMM_IntArray*)
   * </code>
   */
  public static native void OpenMM_AmoebaVdwForce_setParticleExclusions(
      PointerByReference target, int particleIndex, PointerByReference exclusions);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaVdwForce_getParticleExclusions(const OpenMM_AmoebaVdwForce*, int, OpenMM_IntArray*)
   * </code>
   */
  public static native void OpenMM_AmoebaVdwForce_getParticleExclusions(
      PointerByReference target, int particleIndex, PointerByReference exclusions);
  /**
   * Original signature : <code>
   * double OpenMM_AmoebaVdwForce_getCutoffDistance(const OpenMM_AmoebaVdwForce*)</code>
   */
  public static native double OpenMM_AmoebaVdwForce_getCutoffDistance(PointerByReference target);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaVdwForce_setCutoffDistance(OpenMM_AmoebaVdwForce*, double)</code>
   */
  public static native void OpenMM_AmoebaVdwForce_setCutoffDistance(
      PointerByReference target, double distance);
  /**
   * Original signature : <code>void OpenMM_AmoebaVdwForce_setCutoff(OpenMM_AmoebaVdwForce*, double)
   * </code>
   */
  public static native void OpenMM_AmoebaVdwForce_setCutoff(
      PointerByReference target, double cutoff);
  /**
   * Original signature : <code>double OpenMM_AmoebaVdwForce_getCutoff(const OpenMM_AmoebaVdwForce*)
   * </code>
   */
  public static native double OpenMM_AmoebaVdwForce_getCutoff(PointerByReference target);
  /**
   * Original signature : <code>
   * OpenMM_AmoebaVdwForce_NonbondedMethod OpenMM_AmoebaVdwForce_getNonbondedMethod(const OpenMM_AmoebaVdwForce*)
   * </code>
   */
  public static native int OpenMM_AmoebaVdwForce_getNonbondedMethod(PointerByReference target);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaVdwForce_setNonbondedMethod(OpenMM_AmoebaVdwForce*, OpenMM_AmoebaVdwForce_NonbondedMethod)
   * </code>
   */
  public static native void OpenMM_AmoebaVdwForce_setNonbondedMethod(
      PointerByReference target, int method);
  /**
   * Original signature : <code>
   * OpenMM_AmoebaVdwForce_PotentialFunction OpenMM_AmoebaVdwForce_getPotentialFunction(const OpenMM_AmoebaVdwForce*)
   * </code>
   */
  public static native int OpenMM_AmoebaVdwForce_getPotentialFunction(PointerByReference target);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaVdwForce_setPotentialFunction(OpenMM_AmoebaVdwForce*, OpenMM_AmoebaVdwForce_PotentialFunction)
   * </code>
   */
  public static native void OpenMM_AmoebaVdwForce_setPotentialFunction(
      PointerByReference target, int potential);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaVdwForce_setSoftcorePower(OpenMM_AmoebaVdwForce*, int)</code>
   */
  public static native void OpenMM_AmoebaVdwForce_setSoftcorePower(
      PointerByReference target, int n);
  /**
   * Original signature : <code>
   * int OpenMM_AmoebaVdwForce_getSoftcorePower(const OpenMM_AmoebaVdwForce*)</code>
   */
  public static native int OpenMM_AmoebaVdwForce_getSoftcorePower(PointerByReference target);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaVdwForce_setSoftcoreAlpha(OpenMM_AmoebaVdwForce*, double)</code>
   */
  public static native void OpenMM_AmoebaVdwForce_setSoftcoreAlpha(
      PointerByReference target, double alpha);
  /**
   * Original signature : <code>
   * double OpenMM_AmoebaVdwForce_getSoftcoreAlpha(const OpenMM_AmoebaVdwForce*)</code>
   */
  public static native double OpenMM_AmoebaVdwForce_getSoftcoreAlpha(PointerByReference target);
  /**
   * Original signature : <code>
   * OpenMM_AmoebaVdwForce_AlchemicalMethod OpenMM_AmoebaVdwForce_getAlchemicalMethod(const OpenMM_AmoebaVdwForce*)
   * </code>
   */
  public static native int OpenMM_AmoebaVdwForce_getAlchemicalMethod(PointerByReference target);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaVdwForce_setAlchemicalMethod(OpenMM_AmoebaVdwForce*, OpenMM_AmoebaVdwForce_AlchemicalMethod)
   * </code>
   */
  public static native void OpenMM_AmoebaVdwForce_setAlchemicalMethod(
      PointerByReference target, int method);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaVdwForce_updateParametersInContext(OpenMM_AmoebaVdwForce*, OpenMM_Context*)
   * </code>
   */
  public static native void OpenMM_AmoebaVdwForce_updateParametersInContext(
      PointerByReference target, PointerByReference context);
  /**
   * Original signature : <code>
   * OpenMM_Boolean OpenMM_AmoebaVdwForce_usesPeriodicBoundaryConditions(const OpenMM_AmoebaVdwForce*)
   * </code>
   */
  public static native int OpenMM_AmoebaVdwForce_usesPeriodicBoundaryConditions(
      PointerByReference target);
  /**
   * AmoebaWcaDispersionForce<br>
   * Original signature : <code>
   * OpenMM_AmoebaWcaDispersionForce* OpenMM_AmoebaWcaDispersionForce_create()</code>
   */
  public static native PointerByReference OpenMM_AmoebaWcaDispersionForce_create();
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaWcaDispersionForce_destroy(OpenMM_AmoebaWcaDispersionForce*)</code>
   */
  public static native void OpenMM_AmoebaWcaDispersionForce_destroy(PointerByReference target);
  /**
   * Original signature : <code>
   * int OpenMM_AmoebaWcaDispersionForce_getNumParticles(const OpenMM_AmoebaWcaDispersionForce*)
   * </code>
   */
  public static native int OpenMM_AmoebaWcaDispersionForce_getNumParticles(
      PointerByReference target);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaWcaDispersionForce_setParticleParameters(OpenMM_AmoebaWcaDispersionForce*, int, double, double)
   * </code>
   */
  public static native void OpenMM_AmoebaWcaDispersionForce_setParticleParameters(
      PointerByReference target, int particleIndex, double radius, double epsilon);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaWcaDispersionForce_getParticleParameters(const OpenMM_AmoebaWcaDispersionForce*, int, double*, double*)
   * </code>
   */
  public static native void OpenMM_AmoebaWcaDispersionForce_getParticleParameters(
      PointerByReference target, int particleIndex, DoubleBuffer radius, DoubleBuffer epsilon);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaWcaDispersionForce_getParticleParameters(const OpenMM_AmoebaWcaDispersionForce*, int, double*, double*)
   * </code>
   */
  public static native void OpenMM_AmoebaWcaDispersionForce_getParticleParameters(
      PointerByReference target,
      int particleIndex,
      DoubleByReference radius,
      DoubleByReference epsilon);
  /**
   * Original signature : <code>
   * int OpenMM_AmoebaWcaDispersionForce_addParticle(OpenMM_AmoebaWcaDispersionForce*, double, double)
   * </code>
   */
  public static native int OpenMM_AmoebaWcaDispersionForce_addParticle(
      PointerByReference target, double radius, double epsilon);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaWcaDispersionForce_updateParametersInContext(OpenMM_AmoebaWcaDispersionForce*, OpenMM_Context*)
   * </code>
   */
  public static native void OpenMM_AmoebaWcaDispersionForce_updateParametersInContext(
      PointerByReference target, PointerByReference context);
  /**
   * Original signature : <code>
   * double OpenMM_AmoebaWcaDispersionForce_getEpso(const OpenMM_AmoebaWcaDispersionForce*)</code>
   */
  public static native double OpenMM_AmoebaWcaDispersionForce_getEpso(PointerByReference target);
  /**
   * Original signature : <code>
   * double OpenMM_AmoebaWcaDispersionForce_getEpsh(const OpenMM_AmoebaWcaDispersionForce*)</code>
   */
  public static native double OpenMM_AmoebaWcaDispersionForce_getEpsh(PointerByReference target);
  /**
   * Original signature : <code>
   * double OpenMM_AmoebaWcaDispersionForce_getRmino(const OpenMM_AmoebaWcaDispersionForce*)</code>
   */
  public static native double OpenMM_AmoebaWcaDispersionForce_getRmino(PointerByReference target);
  /**
   * Original signature : <code>
   * double OpenMM_AmoebaWcaDispersionForce_getRminh(const OpenMM_AmoebaWcaDispersionForce*)</code>
   */
  public static native double OpenMM_AmoebaWcaDispersionForce_getRminh(PointerByReference target);
  /**
   * Original signature : <code>
   * double OpenMM_AmoebaWcaDispersionForce_getAwater(const OpenMM_AmoebaWcaDispersionForce*)</code>
   */
  public static native double OpenMM_AmoebaWcaDispersionForce_getAwater(PointerByReference target);
  /**
   * Original signature : <code>
   * double OpenMM_AmoebaWcaDispersionForce_getShctd(const OpenMM_AmoebaWcaDispersionForce*)</code>
   */
  public static native double OpenMM_AmoebaWcaDispersionForce_getShctd(PointerByReference target);
  /**
   * Original signature : <code>
   * double OpenMM_AmoebaWcaDispersionForce_getDispoff(const OpenMM_AmoebaWcaDispersionForce*)
   * </code>
   */
  public static native double OpenMM_AmoebaWcaDispersionForce_getDispoff(PointerByReference target);
  /**
   * Original signature : <code>
   * double OpenMM_AmoebaWcaDispersionForce_getSlevy(const OpenMM_AmoebaWcaDispersionForce*)</code>
   */
  public static native double OpenMM_AmoebaWcaDispersionForce_getSlevy(PointerByReference target);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaWcaDispersionForce_setEpso(OpenMM_AmoebaWcaDispersionForce*, double)</code>
   */
  public static native void OpenMM_AmoebaWcaDispersionForce_setEpso(
      PointerByReference target, double inputValue);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaWcaDispersionForce_setEpsh(OpenMM_AmoebaWcaDispersionForce*, double)</code>
   */
  public static native void OpenMM_AmoebaWcaDispersionForce_setEpsh(
      PointerByReference target, double inputValue);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaWcaDispersionForce_setRmino(OpenMM_AmoebaWcaDispersionForce*, double)</code>
   */
  public static native void OpenMM_AmoebaWcaDispersionForce_setRmino(
      PointerByReference target, double inputValue);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaWcaDispersionForce_setRminh(OpenMM_AmoebaWcaDispersionForce*, double)</code>
   */
  public static native void OpenMM_AmoebaWcaDispersionForce_setRminh(
      PointerByReference target, double inputValue);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaWcaDispersionForce_setAwater(OpenMM_AmoebaWcaDispersionForce*, double)</code>
   */
  public static native void OpenMM_AmoebaWcaDispersionForce_setAwater(
      PointerByReference target, double inputValue);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaWcaDispersionForce_setShctd(OpenMM_AmoebaWcaDispersionForce*, double)</code>
   */
  public static native void OpenMM_AmoebaWcaDispersionForce_setShctd(
      PointerByReference target, double inputValue);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaWcaDispersionForce_setDispoff(OpenMM_AmoebaWcaDispersionForce*, double)
   * </code>
   */
  public static native void OpenMM_AmoebaWcaDispersionForce_setDispoff(
      PointerByReference target, double inputValue);
  /**
   * Original signature : <code>
   * void OpenMM_AmoebaWcaDispersionForce_setSlevy(OpenMM_AmoebaWcaDispersionForce*, double)</code>
   */
  public static native void OpenMM_AmoebaWcaDispersionForce_setSlevy(
      PointerByReference target, double inputValue);
  /**
   * Original signature : <code>
   * OpenMM_Boolean OpenMM_AmoebaWcaDispersionForce_usesPeriodicBoundaryConditions(const OpenMM_AmoebaWcaDispersionForce*)
   * </code>
   */
  public static native int OpenMM_AmoebaWcaDispersionForce_usesPeriodicBoundaryConditions(
      PointerByReference target);

  public static class OpenMM_3D_DoubleArray extends PointerType {
    public OpenMM_3D_DoubleArray(Pointer address) {
      super(address);
    }

    public OpenMM_3D_DoubleArray() {
      super();
    }
  };

  public static class OpenMM_2D_IntArray extends PointerType {
    public OpenMM_2D_IntArray(Pointer address) {
      super(address);
    }

    public OpenMM_2D_IntArray() {
      super();
    }
  };

  public static class OpenMM_HippoNonbondedForce extends PointerType {
    public OpenMM_HippoNonbondedForce(Pointer address) {
      super(address);
    }

    public OpenMM_HippoNonbondedForce() {
      super();
    }
  };

  public static class OpenMM_AmoebaGKCavitationForce extends PointerType {
    public OpenMM_AmoebaGKCavitationForce(Pointer address) {
      super(address);
    }

    public OpenMM_AmoebaGKCavitationForce() {
      super();
    }
  };

  public static class OpenMM_Context extends PointerType {
    public OpenMM_Context(Pointer address) {
      super(address);
    }

    public OpenMM_Context() {
      super();
    }
  };

  public static class OpenMM_AmoebaMultipoleForce extends PointerType {
    public OpenMM_AmoebaMultipoleForce(Pointer address) {
      super(address);
    }

    public OpenMM_AmoebaMultipoleForce() {
      super();
    }
  };

  public static class OpenMM_Vec3Array extends PointerType {
    public OpenMM_Vec3Array(Pointer address) {
      super(address);
    }

    public OpenMM_Vec3Array() {
      super();
    }
  };

  public static class OpenMM_AmoebaWcaDispersionForce extends PointerType {
    public OpenMM_AmoebaWcaDispersionForce(Pointer address) {
      super(address);
    }

    public OpenMM_AmoebaWcaDispersionForce() {
      super();
    }
  };

  public static class OpenMM_IntArray extends PointerType {
    public OpenMM_IntArray(Pointer address) {
      super(address);
    }

    public OpenMM_IntArray() {
      super();
    }
  };

  public static class OpenMM_DoubleArray extends PointerType {
    public OpenMM_DoubleArray(Pointer address) {
      super(address);
    }

    public OpenMM_DoubleArray() {
      super();
    }
  };

  public static class OpenMM_AmoebaGeneralizedKirkwoodForce extends PointerType {
    public OpenMM_AmoebaGeneralizedKirkwoodForce(Pointer address) {
      super(address);
    }

    public OpenMM_AmoebaGeneralizedKirkwoodForce() {
      super();
    }
  };

  public static class OpenMM_AmoebaTorsionTorsionForce extends PointerType {
    public OpenMM_AmoebaTorsionTorsionForce(Pointer address) {
      super(address);
    }

    public OpenMM_AmoebaTorsionTorsionForce() {
      super();
    }
  };

  public static class OpenMM_AmoebaVdwForce extends PointerType {
    public OpenMM_AmoebaVdwForce(Pointer address) {
      super(address);
    }

    public OpenMM_AmoebaVdwForce() {
      super();
    }
  };
}
