package edu.uiowa.jopenmm;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.ptr.DoubleByReference;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.PointerByReference;
import java.nio.DoubleBuffer;
import java.nio.IntBuffer;
/**
 * JNA Wrapper for library <b>GKNPOpenMM</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class GKNPOpenMMLibrary implements Library {
	// public static final String JNA_LIBRARY_NAME = "GKNPOpenMM";
	public static final String JNA_LIBRARY_NAME = "GKNPPlugin";
        
	public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(GKNPOpenMMLibrary.JNA_LIBRARY_NAME);
	static {
		Native.register(GKNPOpenMMLibrary.class, GKNPOpenMMLibrary.JNA_NATIVE_LIB);
	}
	/** enum values */
	public static interface OpenMM_GKNPForce_NonbondedMethod {
		public static final int OpenMM_GKNPForce_NoCutoff = 0;
		public static final int OpenMM_GKNPForce_CutoffNonPeriodic = 1;
		public static final int OpenMM_GKNPForce_CutoffPeriodic = 2;
	};
	/**
	 * GKNPForce<br>
	 * Original signature : <code>OpenMM_GKNPForce* OpenMM_GKNPForce_create()</code>
	 */
	public static native PointerByReference OpenMM_GKNPForce_create();
	/** Original signature : <code>void OpenMM_GKNPForce_destroy(OpenMM_GKNPForce*)</code> */
	public static native void OpenMM_GKNPForce_destroy(PointerByReference target);
	/** Original signature : <code>int OpenMM_GKNPForce_addParticle(OpenMM_GKNPForce*, double, double, double, double, OpenMM_Boolean)</code> */
	public static native int OpenMM_GKNPForce_addParticle(PointerByReference target, double radius, double gamma, double vdw_alpha, double charge, int ishydrogen);
	/** Original signature : <code>void OpenMM_GKNPForce_setParticleParameters(OpenMM_GKNPForce*, int, double, double, double, double, OpenMM_Boolean)</code> */
	public static native void OpenMM_GKNPForce_setParticleParameters(PointerByReference target, int index, double radius, double gamma, double vdw_alpha, double charge, int ishydrogen);
	/** Original signature : <code>void OpenMM_GKNPForce_getParticleParameters(const OpenMM_GKNPForce*, int, double*, double*, double*, double*, OpenMM_Boolean*)</code> */
	public static native void OpenMM_GKNPForce_getParticleParameters(PointerByReference target, int index, DoubleBuffer radius, DoubleBuffer gamma, DoubleBuffer vdw_alpha, DoubleBuffer charge, IntBuffer ishydrogen);
	/** Original signature : <code>void OpenMM_GKNPForce_getParticleParameters(const OpenMM_GKNPForce*, int, double*, double*, double*, double*, OpenMM_Boolean*)</code> */
	public static native void OpenMM_GKNPForce_getParticleParameters(PointerByReference target, int index, DoubleByReference radius, DoubleByReference gamma, DoubleByReference vdw_alpha, DoubleByReference charge, IntByReference ishydrogen);
	/** Original signature : <code>int OpenMM_GKNPForce_getNumParticles(const OpenMM_GKNPForce*)</code> */
	public static native int OpenMM_GKNPForce_getNumParticles(PointerByReference target);
	/** Original signature : <code>OpenMM_GKNPForce_NonbondedMethod OpenMM_GKNPForce_getNonbondedMethod(const OpenMM_GKNPForce*)</code> */
	public static native int OpenMM_GKNPForce_getNonbondedMethod(PointerByReference target);
	/** Original signature : <code>void OpenMM_GKNPForce_setNonbondedMethod(OpenMM_GKNPForce*, OpenMM_GKNPForce_NonbondedMethod)</code> */
	public static native void OpenMM_GKNPForce_setNonbondedMethod(PointerByReference target, int method);
	/** Original signature : <code>double OpenMM_GKNPForce_getCutoffDistance(const OpenMM_GKNPForce*)</code> */
	public static native double OpenMM_GKNPForce_getCutoffDistance(PointerByReference target);
	/** Original signature : <code>void OpenMM_GKNPForce_setCutoffDistance(OpenMM_GKNPForce*, double)</code> */
	public static native void OpenMM_GKNPForce_setCutoffDistance(PointerByReference target, double distance);
	/** Original signature : <code>void OpenMM_GKNPForce_updateParametersInContext(OpenMM_GKNPForce*, OpenMM_Context*)</code> */
	public static native void OpenMM_GKNPForce_updateParametersInContext(PointerByReference target, PointerByReference context);
	public static class OpenMM_GKNPForce extends PointerType {
		public OpenMM_GKNPForce(Pointer address) {
			super(address);
		}
		public OpenMM_GKNPForce() {
			super();
		}
	};
}
